from fastapi import APIRouter, HTTPException, UploadFile, File, Depends, Form
from motor.motor_asyncio import AsyncIOMotorClient
from bson import ObjectId
from typing import List, Optional
import os
from dotenv import load_dotenv
from datetime import datetime
from openai import OpenAI
from ..models import User, UserRole, DocumentS3
from ..middleware import require_teacher_or_admin, get_current_user
from ..s3_service import s3_service
import json
import io
import traceback
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ PyMuPDF
try:
    import fitz  # PyMuPDF for PDF processing
    PYMUPDF_AVAILABLE = True
    logger.info("‚úÖ PyMuPDF —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    try:
        import pymupdf as fitz  # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞
        PYMUPDF_AVAILABLE = True
        logger.info("‚úÖ PyMuPDF (pymupdf) —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        PYMUPDF_AVAILABLE = False
        logger.warning("‚ùå PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. PDF —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.")

try:
    from docx import Document  # python-docx for Word documents
    logger.info("‚úÖ python-docx —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError:
    logger.error("‚ùå python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# Load .env from parent directory with encoding fallback
env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
logger.info(f"üîç –ü–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏: {env_path}")

try:
    load_dotenv(env_path, encoding='utf-8')
    logger.info("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (UTF-8)")
except UnicodeDecodeError:
    try:
        load_dotenv(env_path, encoding='utf-16')
        logger.info("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (UTF-16)")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")
except FileNotFoundError:
    logger.error("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

router = APIRouter()

# MongoDB connection
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb+srv://Lida:oayjqe2005@cluster0.ejidejg.mongodb.net/?retryWrites=true&w=majority")

logger.info(f"üóÑÔ∏è MongoDB URL: {MONGODB_URL}")

client = AsyncIOMotorClient(MONGODB_URL)
db = client.LearnApp

# OpenAI configuration
openai_api_key = os.getenv("OPENAI_API_KEY")
if openai_api_key:
    if openai_api_key == "your_openai_api_key_here":
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placeholder –∑–Ω–∞—á–µ–Ω–∏–µ")
        openai_client = None
    else:
        openai_client = OpenAI(api_key=openai_api_key)
        logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
else:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    openai_client = None

async def extract_text_from_file(file: UploadFile) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    logger.info(f"üìÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file.filename}, —Ç–∏–ø: {file.content_type}, —Ä–∞–∑–º–µ—Ä: {file.size}")
    
    try:
        content = await file.read()
        logger.info(f"üìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")
        
        if file.content_type == "application/pdf":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞...")
            if not PYMUPDF_AVAILABLE:
                logger.error("‚ùå PyMuPDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF")
                raise HTTPException(
                    status_code=400, 
                    detail="PDF —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DOCX –∏–ª–∏ TXT —Ñ–∞–π–ª—ã."
                )
            
            pdf_document = fitz.open("pdf", content)
            text = ""
            for page_num in range(pdf_document.page_count):
                page = pdf_document[page_num]
                text += page.get_text()
            pdf_document.close()
            logger.info(f"‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
            
        elif file.content_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            doc = Document(io.BytesIO(content))
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            logger.info(f"‚úÖ Word –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
            
        elif file.content_type == "text/plain":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
            try:
                text = content.decode('utf-8')
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (UTF-8), –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return text
            except UnicodeDecodeError:
                try:
                    text = content.decode('cp1251')  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ Windows
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (CP1251), –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text
                except UnicodeDecodeError:
                    text = content.decode('latin-1')  # Fallback
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (Latin-1), –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text
            
        else:
            supported_formats = ["TXT", "DOCX"]
            if PYMUPDF_AVAILABLE:
                supported_formats.insert(0, "PDF")
            
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}")
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(supported_formats)}"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def extract_text_from_bytes(file_content: bytes, content_type: str, filename: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±–∞–π—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–¥–ª—è S3)"""
    logger.info(f"üìÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ S3: {filename}, —Ç–∏–ø: {content_type}, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
    
    try:
        if content_type == "application/pdf":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞...")
            if not PYMUPDF_AVAILABLE:
                logger.error("‚ùå PyMuPDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF")
                raise HTTPException(
                    status_code=400, 
                    detail="PDF —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DOCX –∏–ª–∏ TXT —Ñ–∞–π–ª—ã."
                )
            
            pdf_document = fitz.open("pdf", file_content)
            text = ""
            for page_num in range(pdf_document.page_count):
                page = pdf_document[page_num]
                text += page.get_text()
            pdf_document.close()
            logger.info(f"‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
            
        elif content_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            doc = Document(io.BytesIO(file_content))
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            logger.info(f"‚úÖ Word –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
            
        elif content_type == "text/plain":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
            try:
                text = file_content.decode('utf-8')
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (UTF-8), –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return text
            except UnicodeDecodeError:
                try:
                    text = file_content.decode('cp1251')  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ Windows
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (CP1251), –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text
                except UnicodeDecodeError:
                    text = file_content.decode('latin-1')  # Fallback
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (Latin-1), –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text
            
        else:
            supported_formats = ["TXT", "DOCX"]
            if PYMUPDF_AVAILABLE:
                supported_formats.insert(0, "PDF")
            
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {content_type}")
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(supported_formats)}"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def generate_quiz_with_gpt(document_text: str, quiz_title: str, difficulty: str, questions_count: int) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    logger.info(f"ü§ñ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫='{quiz_title}', —Å–ª–æ–∂–Ω–æ—Å—Ç—å={difficulty}, –≤–æ–ø—Ä–æ—Å–æ–≤={questions_count}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
        if not openai_api_key or openai_api_key == "your_openai_api_key_here":
            logger.error("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            raise HTTPException(
                status_code=400, 
                detail="OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª .env"
            )
        
        if not openai_client:
            logger.error("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise HTTPException(
                status_code=400, 
                detail="OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY"
            )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è GPT
        max_text_length = 8000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è API
        original_length = len(document_text)
        if len(document_text) > max_text_length:
            document_text = document_text[:max_text_length] + "..."
            logger.info(f"üìè –¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω —Å {original_length} –¥–æ {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç –∏–∑ {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "{difficulty}".
        
        –î–æ–∫—É–º–µ–Ω—Ç:
        {document_text}
        
        –°–æ–∑–¥–∞–π JSON –æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
        {{
            "title": "{quiz_title}",
            "description": "–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            "category": "–î–æ–∫—É–º–µ–Ω—Ç",
            "difficulty": "{difficulty}",
            "time_limit": {questions_count * 2},
            "questions": [
                {{
                    "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
                    "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"],
                    "correct_answer": 0
                }}
            ]
        }}
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        - –£ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        - correct_answer - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (0-3)
        - –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {difficulty}
        - –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        """
        
        logger.info("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI API...")
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.7
        )
        
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI API")
        response_content = response.choices[0].message.content
        logger.info(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_content = response_content.strip()
        
        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã markdown –±–ª–æ–∫–∞ –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if cleaned_content.startswith("```json"):
            cleaned_content = cleaned_content[7:]  # –£–¥–∞–ª—è–µ–º "```json"
        elif cleaned_content.startswith("```"):
            cleaned_content = cleaned_content[3:]   # –£–¥–∞–ª—è–µ–º "```"
            
        if cleaned_content.endswith("```"):
            cleaned_content = cleaned_content[:-3]  # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ "```"
            
        cleaned_content = cleaned_content.strip()
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–π JSON (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {cleaned_content[:200]}...")
        
        try:
            quiz_data = json.loads(cleaned_content)
            logger.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω, –∫–≤–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(quiz_data.get('questions', []))} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return quiz_data
        except json.JSONDecodeError as json_err:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {json_err}")
            logger.error(f"‚ùå –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cleaned_content}")
            raise HTTPException(
                status_code=500, 
                detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
        
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ OpenAI
        error_message = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞: {error_message}")
        logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        if "authentication" in error_message.lower() or "unauthorized" in error_message.lower():
            raise HTTPException(
                status_code=400, 
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π OpenAI API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env"
            )
        elif "rate_limit" in error_message.lower() or "quota" in error_message.lower():
            raise HTTPException(
                status_code=429, 
                detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )
        elif "json" in error_message.lower():
            raise HTTPException(
                status_code=500, 
                detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ HTTPException, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            if isinstance(e, HTTPException):
                raise e
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞: {str(e)}")

@router.post("/upload-document",
            summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –∫–≤–∏–∑ [–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]",
            description="–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–≤–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)")
async def upload_document_and_generate_quiz(
    file: UploadFile = File(...),
    quiz_title: str = Form(...),
    difficulty: str = Form(...),
    questions_count: int = Form(5),
    current_user: User = Depends(get_current_user)
):
    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user.name} (—Ä–æ–ª—å: {current_user.role})")
    logger.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ñ–∞–π–ª={file.filename}, –∑–∞–≥–æ–ª–æ–≤–æ–∫='{quiz_title}', —Å–ª–æ–∂–Ω–æ—Å—Ç—å={difficulty}, –≤–æ–ø—Ä–æ—Å–æ–≤={questions_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–ù–ï –∞–¥–º–∏–Ω!)
    if not current_user.role or current_user.role not in ['teacher']:
        logger.error(f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.name} —Å —Ä–æ–ª—å—é {current_user.role}")
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–≤–∏–∑—ã"
        )
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        if file.size > 10 * 1024 * 1024:
            raise HTTPException(
                status_code=400,
                detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
            )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        allowed_types = [
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/plain"
        ]
        if file.content_type not in allowed_types:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOCX, TXT"
            )
        
        logger.info("üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞...")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        document_text = await extract_text_from_file(file)
        
        if len(document_text.strip()) < 100:
            logger.error(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(document_text.strip())} —Å–∏–º–≤–æ–ª–æ–≤")
            raise HTTPException(status_code=400, detail="–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
        
        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
        await file.seek(0)
        
        logger.info("‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ AWS S3...")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
        if not s3_service.is_available():
            raise HTTPException(
                status_code=500,
                detail="S3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AWS."
            )
        
        s3_metadata = await s3_service.upload_file(file, current_user.id)
        logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {s3_metadata['s3_key']}")
        
        logger.info("üóÑÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ë–î...")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ MongoDB
        document_info = {
            "s3_key": s3_metadata["s3_key"],
            "s3_bucket": s3_metadata["s3_bucket"],
            "s3_region": s3_metadata["s3_region"],
            "original_filename": s3_metadata["original_filename"],
            "content_type": s3_metadata["content_type"],
            "file_size": s3_metadata["file_size"],
            "uploaded_by": current_user.id,
            "uploaded_at": s3_metadata["uploaded_at"],
            "text_length": len(document_text)
        }
        
        document_result = await db.documents.insert_one(document_info)
        logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î —Å ID: {document_result.inserted_id}")
        
        logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é GPT...")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT
        quiz_data = await generate_quiz_with_gpt(document_text, quiz_title, difficulty, questions_count)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        quiz_data["created_by"] = current_user.id
        quiz_data["source_document_id"] = str(document_result.inserted_id)
        quiz_data["created_at"] = datetime.utcnow()
        quiz_data["updated_at"] = datetime.utcnow()
        
        logger.info("üóÑÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –≤ –ë–î...")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–∏–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        quiz_result = await db.quizzes.insert_one(quiz_data)
        quiz_data["_id"] = str(quiz_result.inserted_id)
        
        logger.info(f"‚úÖ –ö–≤–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {quiz_result.inserted_id}")
        
        return {
            "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3 –∏ –∫–≤–∏–∑ —Å–æ–∑–¥–∞–Ω",
            "document_id": str(document_result.inserted_id),
            "quiz_id": str(quiz_result.inserted_id),
            "s3_key": s3_metadata["s3_key"],
            "quiz": quiz_data
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        logger.error(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
        if 's3_metadata' in locals() and s3_metadata.get('s3_key'):
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª {s3_metadata['s3_key']} –∏–∑ S3")
            await s3_service.delete_file(s3_metadata['s3_key'])
        
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/my-documents",
           summary="–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã [–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]",
           description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º")
async def get_my_documents(current_user: User = Depends(get_current_user)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if not current_user.role or current_user.role not in ['teacher']:
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
        )
    
    try:
        documents = []
        cursor = db.documents.find({"uploaded_by": current_user.id})
        async for doc in cursor:
            doc["id"] = str(doc["_id"])
            del doc["_id"]
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–≤–∏–∑—ã
            quizzes = await db.quizzes.find({"source_document_id": doc["id"]}).to_list(None)
            doc["generated_quizzes"] = len(quizzes)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–µ—Å–ª–∏ S3 –¥–æ—Å—Ç—É–ø–µ–Ω)
            if s3_service.is_available() and doc.get("s3_key"):
                doc["download_url"] = s3_service.get_file_url(doc["s3_key"], expiration=3600)  # 1 —á–∞—Å
            else:
                doc["download_url"] = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ S3
            if doc.get("s3_key"):
                metadata = await s3_service.get_file_metadata(doc["s3_key"])
                doc["file_exists"] = metadata is not None
            else:
                doc["file_exists"] = False
            
            documents.append(doc)
        
        return {"documents": documents}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/my-generated-quizzes",
           summary="–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–∏–∑—ã [–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]",
           description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–≤–∏–∑–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º")
async def get_my_generated_quizzes(current_user: User = Depends(get_current_user)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if not current_user.role or current_user.role not in ['teacher']:
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–≤–∏–∑—ã"
        )
    
    try:
        quizzes = []
        cursor = db.quizzes.find({"created_by": current_user.id})
        async for quiz in cursor:
            quiz["id"] = str(quiz["_id"])
            del quiz["_id"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
            attempts_count = await db.quiz_attempts.count_documents({"quiz_id": quiz["id"]})
            quiz["attempts_count"] = attempts_count
            
            quizzes.append(quiz)
        
        return {"quizzes": quizzes}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.delete("/documents/{document_id}",
              summary="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç [–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]",
              description="–£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∫–≤–∏–∑—ã")
async def delete_document(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if not current_user.role or current_user.role not in ['teacher']:
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        document = await db.documents.find_one({
            "_id": ObjectId(document_id),
            "uploaded_by": current_user.id
        })
        
        if not document:
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3 (–µ—Å–ª–∏ –µ—Å—Ç—å s3_key)
        if document.get("s3_key") and s3_service.is_available():
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {document['s3_key']} –∏–∑ S3...")
            success = await s3_service.delete_file(document["s3_key"])
            if success:
                logger.info(f"‚úÖ –§–∞–π–ª {document['s3_key']} —É–¥–∞–ª–µ–Ω –∏–∑ S3")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {document['s3_key']} –∏–∑ S3")
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–≤–∏–∑—ã
        deleted_quizzes = await db.quizzes.delete_many({"source_document_id": document_id})
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_quizzes.deleted_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–æ–≤")
        
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ MongoDB
        await db.documents.delete_one({"_id": ObjectId(document_id)})
        logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î")
        
        return {
            "message": "–î–æ–∫—É–º–µ–Ω—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–≤–∏–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
            "deleted_quizzes": deleted_quizzes.deleted_count,
            "file_deleted_from_s3": document.get("s3_key") is not None
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/quiz-stats/{quiz_id}",
           summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–≤–∏–∑—É [–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]",
           description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—ã—Ç–æ–∫ –ø–æ –∫–≤–∏–∑—É")
async def get_quiz_stats(
    quiz_id: str,
    current_user: User = Depends(get_current_user)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if not current_user.role or current_user.role not in ['teacher']:
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –∫–≤–∏–∑–æ–≤"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–≤–∏–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        quiz = await db.quizzes.find_one({
            "_id": ObjectId(quiz_id),
            "created_by": current_user.id
        })
        
        if not quiz:
            raise HTTPException(status_code=404, detail="–ö–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø—ã—Ç–æ–∫
        attempts = await db.quiz_attempts.find({"quiz_id": quiz_id}).to_list(None)
        
        total_attempts = len(attempts)
        if total_attempts == 0:
            return {
                "quiz_title": quiz["title"],
                "total_attempts": 0,
                "average_score": 0,
                "completion_rate": 0,
                "attempts": []
            }
        
        completed_attempts = [a for a in attempts if a.get("completed", False)]
        completion_rate = len(completed_attempts) / total_attempts * 100
        
        scores = [a.get("score", 0) for a in completed_attempts if a.get("score") is not None]
        average_score = sum(scores) / len(scores) if scores else 0
        
        return {
            "quiz_title": quiz["title"],
            "total_attempts": total_attempts,
            "completed_attempts": len(completed_attempts),
            "average_score": round(average_score, 2),
            "completion_rate": round(completion_rate, 2),
            "attempts": attempts
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/download/{document_id}",
           summary="–°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç [–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å]",
           description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ S3")
async def download_document(
    document_id: str,
    current_user: User = Depends(get_current_user)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if not current_user.role or current_user.role not in ['teacher']:
        raise HTTPException(
            status_code=403, 
            detail="–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        document = await db.documents.find_one({
            "_id": ObjectId(document_id),
            "uploaded_by": current_user.id
        })
        
        if not document:
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –∞–≤—Ç–æ—Ä–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ S3 –∫–ª—é—á–∞
        if not document.get("s3_key"):
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å S3
        if not s3_service.is_available():
            raise HTTPException(status_code=500, detail="–°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å)
        download_url = s3_service.get_file_url(document["s3_key"], expiration=3600)
        
        if not download_url:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        
        return {
            "download_url": download_url,
            "filename": document.get("original_filename", document.get("filename", "document")),
            "expires_in": 3600,  # —Å–µ–∫—É–Ω–¥—ã
            "file_size": document.get("file_size", document.get("size", 0))
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=str(e)) 