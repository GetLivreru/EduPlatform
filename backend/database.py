"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Vercel serverless environment
–£–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ - —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
"""
import os
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

# Load .env —Ñ–∞–π–ª
env_path = os.path.join(os.path.dirname(__file__), '.env')
try:
    load_dotenv(env_path, encoding='utf-8')
except:
    pass

# MongoDB connection
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")

async def get_client():
    """–ü–æ–ª—É—á–∏—Ç—å MongoDB –∫–ª–∏–µ–Ω—Ç (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑)"""
    try:
        print(f"üîÑ –°–æ–∑–¥–∞–µ–º –°–í–ï–ñ–ï–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
        print(f"üîó URL: {MONGODB_URL[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –∫–ª–∏–µ–Ω—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–ª—è serverless
        client = AsyncIOMotorClient(
            MONGODB_URL,
            serverSelectionTimeoutMS=10000,  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            connectTimeoutMS=10000,          # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            maxPoolSize=1,                   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª –¥–ª—è serverless
            retryWrites=True,
            maxIdleTimeMS=30000             # –ó–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫
        )
        
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await client.admin.command('ping')
        print(f"‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        return client
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:")
        print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        print(f"‚ùå URL (—á–∞—Å—Ç–∏—á–Ω–æ): {MONGODB_URL[:50]}...")
        raise

async def get_database():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö LearnApp"""
    client = await get_client()
    db = client.LearnApp
    print("üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö LearnApp –≥–æ—Ç–æ–≤–∞")
    return db

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
def get_sync_client():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        return AsyncIOMotorClient(
            MONGODB_URL,
            serverSelectionTimeoutMS=5000,
            connectTimeoutMS=5000,
            maxPoolSize=1,
            retryWrites=True
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MongoDB –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
client = get_sync_client()
db = client.LearnApp if client else None 