#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
"""

import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
import json
from bson import ObjectId

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_documents():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB"""
    
    mongodb_url = os.getenv("MONGODB_URL", "mongodb+srv://Lida:oayjqe2005@cluster0.ejidejg.mongodb.net/?retryWrites=true&w=majority")
    client = AsyncIOMotorClient(mongodb_url)
    db = client.LearnApp
    
    try:
        print("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ MongoDB...")
        print("="*50)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        total_count = await db.documents.count_documents({})
        print(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_count}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ s3_key
        no_s3_count = await db.documents.count_documents({
            "$or": [
                {"s3_key": {"$exists": False}},
                {"s3_key": None},
                {"s3_key": ""}
            ]
        })
        print(f"üîÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ s3_key: {no_s3_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        print("-" * 50)
        
        cursor = db.documents.find({}).limit(3)
        docs = []
        async for doc in cursor:
            docs.append(doc)
        
        for i, doc in enumerate(docs, 1):
            print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç {i}:")
            print(f"   _id: {doc['_id']}")
            print(f"   –ü–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
            
            for key, value in doc.items():
                if key == '_id':
                    continue
                    
                if isinstance(value, bytes):
                    print(f"     {key}: <binary data, {len(value)} bytes>")
                elif isinstance(value, str) and len(value) > 100:
                    print(f"     {key}: <string, {len(value)} chars>")
                elif isinstance(value, ObjectId):
                    print(f"     {key}: {value}")
                else:
                    print(f"     {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
        
        pipeline = [
            {"$project": {"arrayofkeyvalue": {"$objectToArray": "$$ROOT"}}},
            {"$unwind": "$arrayofkeyvalue"},
            {"$group": {"_id": "$arrayofkeyvalue.k", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}}
        ]
        
        unique_fields = []
        async for field_info in db.documents.aggregate(pipeline):
            unique_fields.append(field_info)
        
        print(f"\nüìä –í—Å–µ –ø–æ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ documents:")
        for field in unique_fields:
            print(f"   {field['_id']}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {field['count']} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
        
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å file_data –∏–ª–∏ content
        file_data_count = await db.documents.count_documents({"file_data": {"$exists": True}})
        content_count = await db.documents.count_documents({"content": {"$exists": True}})
        
        print(f"\nüìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        print(f"   file_data: {file_data_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print(f"   content: {content_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if file_data_count == 0 and content_count == 0:
            print("\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ S3")
            print("   2. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º GridFS
            gridfs_count = await db["fs.files"].count_documents({})
            if gridfs_count > 0:
                print(f"\nüóÉÔ∏è  –ù–∞–π–¥–µ–Ω–æ {gridfs_count} —Ñ–∞–π–ª–æ–≤ –≤ GridFS!")
                print("   –§–∞–π–ª—ã –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ GridFS –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π")
        
        print("\n" + "="*50)
        print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        client.close()

if __name__ == "__main__":
    asyncio.run(check_documents()) 