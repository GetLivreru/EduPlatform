#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AWS S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3
- –°–æ–∑–¥–∞–Ω–∏–µ bucket (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
- –ó–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
- –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é presigned URLs

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_s3_integration.py
"""

import asyncio
import os
import sys
import tempfile
import logging
from io import BytesIO

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º s3_service
from dotenv import load_dotenv
load_dotenv()

from s3_service import S3Service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class S3IntegrationTester:
    def __init__(self):
        self.s3_service = S3Service()
        self.test_results = {
            "connection": False,
            "upload": False,
            "download": False,
            "presigned_url": False,
            "delete": False
        }
        self.test_file_key = None
    
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞"""
        print(f"\n{'='*50}")
        print(f"üß™ {title}")
        print('='*50)
    
    def print_result(self, test_name: str, success: bool, message: str = ""):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if message:
            print(f"   ‚ÑπÔ∏è  {message}")
    
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3"""
        self.print_header("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            required_vars = [
                "AWS_ACCESS_KEY_ID",
                "AWS_SECRET_ACCESS_KEY",
                "AWS_S3_BUCKET_NAME"
            ]
            
            missing_vars = []
            for var in required_vars:
                if not os.getenv(var):
                    missing_vars.append(var)
            
            if missing_vars:
                self.print_result(
                    "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_vars)}"
                )
                return False
            
            self.print_result("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", True, "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å S3 —Å–µ—Ä–≤–∏—Å–∞
            if self.s3_service.is_available():
                self.print_result("S3 —Å–µ—Ä–≤–∏—Å", True, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket
                bucket_name = self.s3_service.bucket_name
                try:
                    self.s3_service.s3_client.head_bucket(Bucket=bucket_name)
                    self.print_result("S3 Bucket", True, f"Bucket '{bucket_name}' –¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    if "404" in str(e):
                        self.print_result("S3 Bucket", False, f"Bucket '{bucket_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        return False
                    else:
                        self.print_result("S3 Bucket", False, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
                        return False
                
                self.test_results["connection"] = True
                return True
            else:
                self.print_result("S3 —Å–µ—Ä–≤–∏—Å", False, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return False
                
        except Exception as e:
            self.print_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_upload(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        self.print_header("–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_content = b"Test document content for S3 integration testing"
            test_filename = "test_document.txt"
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º UploadFile –æ–±—ä–µ–∫—Ç
            class MockUploadFile:
                def __init__(self, content: bytes, filename: str):
                    self.content = content
                    self.filename = filename
                    self.content_type = "text/plain"
                    self.size = len(content)
                    self._position = 0
                
                async def read(self):
                    return self.content
                
                async def seek(self, position: int):
                    self._position = position
            
            mock_file = MockUploadFile(test_content, test_filename)
            test_user_id = "test_user_123"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            result = await self.s3_service.upload_file(mock_file, test_user_id)
            
            self.test_file_key = result["s3_key"]
            
            self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", True, f"S3 key: {self.test_file_key}")
            self.test_results["upload"] = True
            return True
            
        except Exception as e:
            self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_download(self):
        """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        self.print_header("–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
        
        if not self.test_file_key:
            self.print_result("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", False, "–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return False
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            content = await self.s3_service.download_file(self.test_file_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            expected_content = b"Test document content for S3 integration testing"
            if content == expected_content:
                self.print_result("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", True, f"–†–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")
                self.test_results["download"] = True
                return True
            else:
                self.print_result("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", False, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return False
                
        except Exception as e:
            self.print_result("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_presigned_url(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ presigned URL"""
        self.print_header("–¢–µ—Å—Ç presigned URL")
        
        if not self.test_file_key:
            self.print_result("Presigned URL", False, "–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è URL")
            return False
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL
            url = self.s3_service.get_file_url(self.test_file_key, expiration=300)  # 5 –º–∏–Ω—É—Ç
            
            if url and url.startswith("https://"):
                self.print_result("Presigned URL", True, "URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                print(f"   üîó URL: {url[:80]}...")
                self.test_results["presigned_url"] = True
                return True
            else:
                self.print_result("Presigned URL", False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
                return False
                
        except Exception as e:
            self.print_result("Presigned URL", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_metadata(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞")
        
        if not self.test_file_key:
            self.print_result("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", False, "–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = await self.s3_service.get_file_metadata(self.test_file_key)
            
            if metadata:
                self.print_result("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", True, "–ü–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                print(f"   üìÑ Content Type: {metadata.get('content_type')}")
                print(f"   üìè Size: {metadata.get('content_length')} –±–∞–π—Ç")
                print(f"   üìÖ Modified: {metadata.get('last_modified')}")
                return True
            else:
                self.print_result("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
                return False
                
        except Exception as e:
            self.print_result("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_delete(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        self.print_header("–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        
        if not self.test_file_key:
            self.print_result("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", False, "–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            success = await self.s3_service.delete_file(self.test_file_key)
            
            if success:
                self.print_result("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", True, "–§–∞–π–ª —É–¥–∞–ª–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
                try:
                    await self.s3_service.download_file(self.test_file_key)
                    self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", False, "–§–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False
                except Exception:
                    self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", True, "–§–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω")
                    self.test_results["delete"] = True
                    return True
            else:
                self.print_result("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", False, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å")
                return False
                
        except Exception as e:
            self.print_result("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", False, f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AWS S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("="*50)
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", self.test_connection),
            ("–ó–∞–≥—Ä—É–∑–∫–∞", self.test_upload),
            ("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", self.test_download),
            ("Presigned URL", self.test_presigned_url),
            ("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", self.test_metadata),
            ("–£–¥–∞–ª–µ–Ω–∏–µ", self.test_delete)
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            success = await test_func()
            if not success and test_name in ["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"]:
                print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}'. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
                break
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        self.print_summary()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\n{'='*50}")
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print('='*50)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{status} {test_name.capitalize()}")
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! S3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        elif passed_tests >= total_tests // 2:
            print("‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
        else:
            print("‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AWS.")
        
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not self.test_results["connection"]:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AWS credentials –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ IAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        elif not self.test_results["upload"]:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ S3 bucket")
        elif not self.test_results["download"]:
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ S3 bucket")
        elif passed_tests == total_tests:
            print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("   ‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = S3IntegrationTester()
    
    try:
        await tester.run_all_tests()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 