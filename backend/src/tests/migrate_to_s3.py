#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ MongoDB –≤ AWS S3

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ MongoDB,
–≤ AWS S3 –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python migrate_to_s3.py

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    MONGODB_URL - URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
    AWS_ACCESS_KEY_ID - AWS Access Key
    AWS_SECRET_ACCESS_KEY - AWS Secret Key  
    AWS_REGION - AWS —Ä–µ–≥–∏–æ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é us-east-1)
    AWS_S3_BUCKET_NAME - –∏–º—è S3 bucket
"""

import asyncio
import os
import sys
import logging
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from motor.motor_asyncio import AsyncIOMotorClient
from bson import ObjectId
from dotenv import load_dotenv
from aws.s3_service import S3Service
import tempfile
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DocumentMigrator:
    def __init__(self):
        # MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.mongodb_url = os.getenv("MONGODB_URL", "mongodb+srv://Lida:oayjqe2005@cluster0.ejidejg.mongodb.net/?retryWrites=true&w=majority")
        self.client = AsyncIOMotorClient(self.mongodb_url)
        self.db = self.client.LearnApp
        
        # S3 —Å–µ—Ä–≤–∏—Å
        self.s3_service = S3Service()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.stats = {
            "total_documents": 0,
            "migrated": 0,
            "skipped": 0,
            "errors": 0
        }
    
    async def connect(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB
            await self.client.admin.command('ping')
            logger.info("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º S3
            if not self.s3_service.is_available():
                raise Exception("S3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            logger.info("‚úÖ S3 —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def find_old_documents(self) -> List[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–±–µ–∑ s3_key)"""
        try:
            # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø–æ–ª—è s3_key
            cursor = self.db.documents.find({
                "$or": [
                    {"s3_key": {"$exists": False}},
                    {"s3_key": None},
                    {"s3_key": ""}
                ]
            })
            
            documents = []
            async for doc in cursor:
                documents.append(doc)
            
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return documents
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    async def migrate_document(self, document: Dict[str, Any]) -> bool:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ S3"""
        try:
            doc_id = document["_id"]
            filename = document.get("filename", f"document_{doc_id}")
            
            logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename} (ID: {doc_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if "file_data" not in document and "content" not in document:
                logger.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç {doc_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                self.stats["skipped"] += 1
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            file_data = document.get("file_data") or document.get("content")
            if not file_data:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}")
                self.stats["skipped"] += 1
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            content_type = document.get("content_type", "application/octet-stream")
            user_id = document.get("uploaded_by", "unknown")
            file_size = len(file_data) if isinstance(file_data, bytes) else len(str(file_data))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è S3
            file_extension = filename.split('.')[-1] if '.' in filename else 'bin'
            s3_key = f"{user_id}/{uuid.uuid4()}.{file_extension}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
            try:
                self.s3_service.s3_client.put_object(
                    Bucket=self.s3_service.bucket_name,
                    Key=s3_key,
                    Body=file_data,
                    ContentType=content_type,
                    Metadata={
                        'original-filename': filename,
                        'uploaded-by': user_id,
                        'migrated-from': 'mongodb',
                        'migration-date': datetime.utcnow().isoformat()
                    }
                )
                
                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {s3_key}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {e}")
                self.stats["errors"] += 1
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ MongoDB
            update_data = {
                "s3_key": s3_key,
                "s3_bucket": self.s3_service.bucket_name,
                "s3_region": self.s3_service.aws_region,
                "original_filename": filename,
                "file_size": file_size,
                "migrated_at": datetime.utcnow()
            }
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞
            unset_fields = {}
            if "file_data" in document:
                unset_fields["file_data"] = ""
            if "content" in document:
                unset_fields["content"] = ""
            
            update_query = {"$set": update_data}
            if unset_fields:
                update_query["$unset"] = unset_fields
            
            await self.db.documents.update_one(
                {"_id": doc_id},
                update_query
            )
            
            logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ MongoDB –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}")
            self.stats["migrated"] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document.get('_id')}: {e}")
            self.stats["errors"] += 1
            return False
    
    async def migrate_all(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ S3")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not await self.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        documents = await self.find_old_documents()
        self.stats["total_documents"] = len(documents)
        
        if not documents:
            logger.info("‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB!")
        print("üíæ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.")
        
        confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ").lower().strip()
        if confirm not in ['–¥–∞', 'yes', 'y', '–¥']:
            logger.info("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        for i, document in enumerate(documents, 1):
            logger.info(f"üìÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(documents)}")
            await self.migrate_document(document)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
            await asyncio.sleep(0.1)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_statistics()
        return True
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("\n" + "="*50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò")
        print("="*50)
        print(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {self.stats['total_documents']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['migrated']}")
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.stats['skipped']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        if self.stats['total_documents'] > 0:
            success_rate = (self.stats['migrated'] / self.stats['total_documents']) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print("="*50)
        
        if self.stats['migrated'] > 0:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("‚ÑπÔ∏è  –§–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ AWS S3")
            print("‚ÑπÔ∏è  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ MongoDB")
        else:
            print("‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ AWS S3")
    print("="*50)
    
    migrator = DocumentMigrator()
    
    try:
        success = await migrator.migrate_all()
        
        if success:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        migrator.client.close()

if __name__ == "__main__":
    asyncio.run(main()) 