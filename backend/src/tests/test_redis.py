#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

    
import asyncio
import json
import time
from redis_cache import RedisCache

async def test_basic_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π Redis"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π Redis...")
    
    cache = RedisCache()
    await cache.connect()
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    test_key = "test:basic"
    test_data = {"message": "Hello Redis!", "timestamp": time.time()}
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    success = await cache.set(test_key, test_data, ttl=60)
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ
    retrieved = await cache.get(test_key)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ: {'‚úÖ OK' if retrieved else '‚ùå FAILED'}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {retrieved}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    exists = await cache.exists(test_key)
    print(f"   –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ: {'‚úÖ OK' if exists else '‚ùå FAILED'}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    deleted = await cache.delete(test_key)
    print(f"   –£–¥–∞–ª–µ–Ω–∏–µ: {'‚úÖ OK' if deleted else '‚ùå FAILED'}")
    
    await cache.disconnect()

async def test_session_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Å—Å–∏—è–º–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π...")
    
    cache = RedisCache()
    await cache.connect()
    
    # –¢–µ—Å—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_id = "test_user_123"
    session_data = {
        "id": user_id,
        "name": "Test User",
        "login": "test@example.com",
        "role": "student",
        "quiz_points": 150,
        "last_activity": time.time()
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    success = await cache.save_session(user_id, session_data)
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    retrieved_session = await cache.get_session(user_id)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {'‚úÖ OK' if retrieved_session else '‚ùå FAILED'}")
    print(f"   –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {retrieved_session}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    deleted = await cache.delete_session(user_id)
    print(f"   –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {'‚úÖ OK' if deleted else '‚ùå FAILED'}")
    
    await cache.disconnect()

async def test_quiz_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–≤–∏–∑–∞–º–∏"""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∏–∑–æ–≤...")
    
    cache = RedisCache()
    await cache.connect()
    
    # –¢–µ—Å—Ç –∫–≤–∏–∑–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–≤–∏–∑–æ–≤")
    quiz_id = "test_quiz_456"
    quiz_data = {
        "id": quiz_id,
        "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–∏–∑ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
        "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π Python",
        "category": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "difficulty": "Medium",
        "time_limit": 30,
        "questions": [
            {
                "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
                "options": ["–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–ó–º–µ—è", "–§—Ä–µ–π–º–≤–æ—Ä–∫", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"],
                "correct_answer": 0
            },
            {
                "text": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è?",
                "options": ["=", "==", "===", "!="],
                "correct_answer": 1
            }
        ]
    }
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞
    success = await cache.cache_quiz(quiz_id, quiz_data)
    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∏–∑–∞
    retrieved_quiz = await cache.get_quiz(quiz_id)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–≤–∏–∑–∞: {'‚úÖ OK' if retrieved_quiz else '‚ùå FAILED'}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞: {retrieved_quiz.get('title') if retrieved_quiz else 'N/A'}")
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤
    quizzes_list = [
        {"id": "quiz1", "title": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "category": "–¢–æ—á–Ω—ã–µ –Ω–∞—É–∫–∏"},
        {"id": "quiz2", "title": "–ò—Å—Ç–æ—Ä–∏—è", "category": "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏"},
        {"id": quiz_id, "title": quiz_data["title"], "category": quiz_data["category"]}
    ]
    
    success = await cache.cache_quizzes_list(quizzes_list)
    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤
    retrieved_list = await cache.get_quizzes_list()
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤: {'‚úÖ OK' if retrieved_list else '‚ùå FAILED'}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∏–∑–æ–≤: {len(retrieved_list) if retrieved_list else 0}")
    
    # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∫–≤–∏–∑–∞
    await cache.invalidate_quiz_cache(quiz_id)
    print(f"   –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞: ‚úÖ OK")
    
    await cache.disconnect()

async def test_user_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    cache = RedisCache()
    await cache.connect()
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    user_id = "test_user_789"
    user_profile = {
        "id": user_id,
        "name": "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤",
        "login": "alexey@example.com",
        "role": "student",
        "quiz_points": 275,
        "created_at": "2024-01-15T10:30:00"
    }
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    success = await cache.cache_user_profile(user_id, user_profile)
    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    retrieved_profile = await cache.get_user_profile(user_id)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {'‚úÖ OK' if retrieved_profile else '‚ùå FAILED'}")
    print(f"   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {retrieved_profile.get('name') if retrieved_profile else 'N/A'}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_results = [
        {"quiz_id": "quiz1", "score": 85.5, "completed_at": "2024-01-15T11:00:00"},
        {"quiz_id": "quiz2", "score": 92.0, "completed_at": "2024-01-15T12:00:00"},
        {"quiz_id": "quiz3", "score": 78.5, "completed_at": "2024-01-15T13:00:00"}
    ]
    
    success = await cache.cache_user_results(user_id, user_results)
    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    retrieved_results = await cache.get_user_results(user_id)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {'‚úÖ OK' if retrieved_results else '‚ùå FAILED'}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(retrieved_results) if retrieved_results else 0}")
    
    # –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–≥–æ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cache.invalidate_user_cache(user_id)
    print(f"   –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚úÖ OK")
    
    await cache.disconnect()

async def test_recommendations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    cache = RedisCache()
    await cache.connect()
    
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–±—É—á–µ–Ω–∏—è")
    user_id = "test_user_recommendations"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    recommendations = {
        "user_id": user_id,
        "quiz_id": "python_basics",
        "subject": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "level": "Beginner",
        "weak_areas": ["–¶–∏–∫–ª—ã", "–§—É–Ω–∫—Ü–∏–∏", "–°–ø–∏—Å–∫–∏"],
        "learning_resources": [
            {"type": "video", "title": "Python —Ü–∏–∫–ª—ã", "url": "example.com/video1"},
            {"type": "article", "title": "–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏", "url": "example.com/article1"}
        ],
        "practice_exercises": ["–ù–∞–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª for", "–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é", "–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏"],
        "study_schedule": [
            {"day": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tasks": ["–ò–∑—É—á–∏—Ç—å —Ü–∏–∫–ª—ã for"]},
            {"day": "–í—Ç–æ—Ä–Ω–∏–∫", "tasks": ["–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"]},
            {"day": "–°—Ä–µ–¥–∞", "tasks": ["–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏"]}
        ],
        "expected_outcomes": ["–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤", "–£–º–µ–Ω–∏–µ –ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏"]
    }
    
    success = await cache.cache_learning_recommendations(user_id, recommendations)
    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    retrieved_recommendations = await cache.get_learning_recommendations(user_id)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {'‚úÖ OK' if retrieved_recommendations else '‚ùå FAILED'}")
    print(f"   –ü—Ä–µ–¥–º–µ—Ç: {retrieved_recommendations.get('subject') if retrieved_recommendations else 'N/A'}")
    print(f"   –°–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏: {retrieved_recommendations.get('weak_areas') if retrieved_recommendations else 'N/A'}")
    
    # –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
    learning_path = {
        "user_id": user_id,
        "subject": "Python Programming",
        "level": "Intermediate",
        "duration_days": 30,
        "content": [
            {"day": 1, "topics": ["–û—Å–Ω–æ–≤—ã Python"], "exercises": ["Hello World", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"]},
            {"day": 2, "topics": ["–£—Å–ª–æ–≤–∏—è"], "exercises": ["if-else", "elif"]},
            {"day": 3, "topics": ["–¶–∏–∫–ª—ã"], "exercises": ["for", "while"]},
        ]
    }
    
    success = await cache.cache_learning_path(user_id, learning_path)
    print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è: {'‚úÖ OK' if success else '‚ùå FAILED'}")
    
    retrieved_path = await cache.get_learning_path(user_id)
    print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è: {'‚úÖ OK' if retrieved_path else '‚ùå FAILED'}")
    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {retrieved_path.get('duration_days') if retrieved_path else 'N/A'} –¥–Ω–µ–π")
    
    await cache.disconnect()

async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    cache = RedisCache()
    await cache.connect()
    
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
    start_time = time.time()
    for i in range(100):
        await cache.set(f"perf_test:{i}", {"data": f"test_data_{i}"}, ttl=60)
    write_time = time.time() - start_time
    print(f"   –ó–∞–ø–∏—Å—å 100 –∫–ª—é—á–µ–π: {write_time:.3f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è
    start_time = time.time()
    for i in range(100):
        await cache.get(f"perf_test:{i}")
    read_time = time.time() - start_time
    print(f"   –ß—Ç–µ–Ω–∏–µ 100 –∫–ª—é—á–µ–π: {read_time:.3f} —Å–µ–∫—É–Ω–¥")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for i in range(100):
        await cache.delete(f"perf_test:{i}")
    
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {write_time/100*1000:.2f} –º—Å/–æ–ø–µ—Ä–∞—Ü–∏—è")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {read_time/100*1000:.2f} –º—Å/–æ–ø–µ—Ä–∞—Ü–∏—è")
    
    await cache.disconnect()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        await test_basic_operations()
        await test_session_operations()
        await test_quiz_operations()
        await test_user_operations()
        await test_recommendations()
        await test_performance()
        
        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("‚úÖ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("üîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   - –õ–æ–∫–∞–ª—å–Ω–æ: redis-server")
        print("   - Docker: docker run -d -p 6379:6379 redis:7.2-alpine")
        
if __name__ == "__main__":
    asyncio.run(main()) 