from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from fastapi.openapi.utils import get_openapi
from motor.motor_asyncio import AsyncIOMotorClient
from .models import QuizBase, QuizQuestion, UserCreate, UserLogin, UserResponse, QuizDB, QuizResponse, UserInDB, QuizAttempt, UserRole
from .middleware import create_access_token, get_current_user, require_admin, require_teacher_or_admin
from .redis_cache import cache
from datetime import datetime, timedelta
from passlib.context import CryptContext
from bson import ObjectId
from typing import List
from .routers import quiz_attempts, quizzes, admin, teachers
import os

app = FastAPI(
    title="Educational Quiz Platform",
    description="REST API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –∫–≤–∏–∑–æ–≤",
    version="1.0.0",
    docs_url=None,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π /docs endpoint
    redoc_url=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π /redoc endpoint
)

# Configure CORS
cors_origins = os.getenv("CORS_ORIGINS", "http://localhost:5173").split(",")
cors_origins = [origin.strip() for origin in cors_origins]

# –î–æ–±–∞–≤–ª—è–µ–º Vercel –¥–æ–º–µ–Ω –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
if "https://edu-platform-five.vercel.app" not in cors_origins:
    cors_origins.append("https://edu-platform-five.vercel.app")

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# MongoDB connection
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://localhost:27017")
client = AsyncIOMotorClient(MONGODB_URL)
db = client.LearnApp

# Collections
quizzes_collection = db.quizzes
users_collection = db.users
learning_paths_collection = db.learning_paths
quiz_attempts_collection = db.quiz_attempts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# === –°–û–ë–´–¢–ò–Ø –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê ===

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    try:
        await client.admin.command('ping')
        print("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üîó MongoDB URL: {MONGODB_URL[:50]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º Redis
    await cache.connect()
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –û—Ç–∫–ª—é—á–∞–µ–º Redis
    await cache.disconnect()
    print("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# Include routers
app.include_router(quiz_attempts.router, prefix="/api/quiz-attempts", tags=["quiz-attempts"])
app.include_router(quizzes.router, tags=["quizzes"])
app.include_router(admin.router, prefix="/admin", tags=["admin"], dependencies=[Depends(require_admin)])
app.include_router(teachers.router, prefix="/teachers", tags=["teachers"])

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url="/openapi.json",
        title="Quiz Platform API Documentation",
        swagger_js_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css",
        swagger_favicon_url="/favicon.ico"
    )

@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url="/openapi.json",
        title="Quiz Platform API Documentation - ReDoc",
        redoc_js_url="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"
    )

@app.get("/openapi.json", include_in_schema=False)
async def get_open_api_endpoint():
    openapi_schema = get_openapi(
        title="Educational Quiz Platform API",
        version="1.0.0",
        description="REST API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –∫–≤–∏–∑–æ–≤.",
        routes=app.routes,
    )
    return openapi_schema

@app.get("/",
        summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API",
        tags=["—Å—Ç–∞—Ç—É—Å"])
async def root():
    return {"message": "Welcome to Educational Quiz Platform API"}

@app.get("/api/health",
        summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º",
        tags=["—Å—Ç–∞—Ç—É—Å"])
async def health_check():
    status = {
        "api": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "mongodb": "unknown",
            "redis": "unknown"
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB
    try:
        await client.admin.command('ping')
        status["services"]["mongodb"] = "healthy"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–≤–∏–∑–æ–≤
        users_count = await db.users.count_documents({})
        quizzes_count = await db.quizzes.count_documents({})
        status["data"] = {
            "users_count": users_count,
            "quizzes_count": quizzes_count
        }
    except Exception as e:
        status["services"]["mongodb"] = f"error: {str(e)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    try:
        if cache.redis_client:
            await cache.redis_client.ping()
            status["services"]["redis"] = "healthy"
        else:
            status["services"]["redis"] = "not_configured"
    except Exception as e:
        status["services"]["redis"] = f"error: {str(e)}"
    
    return status

@app.post("/api/register", 
         response_model=UserResponse,
         summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
         description="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ",
         tags=["–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def register(user: UserCreate):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = await users_collection.find_one({"login": user.login})
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = pwd_context.hash(user.password)
    user_dict = user.model_dump()
    user_dict["password"] = hashed_password
    user_dict["created_at"] = datetime.now()
    user_dict["quiz_points"] = 0
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    user_dict["role"] = user.role.value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await users_collection.insert_one(user_dict)
    created_user = await users_collection.find_one({"_id": result.inserted_id})
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    created_user["id"] = str(created_user["_id"])
    del created_user["_id"]
    del created_user["password"]  # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å
    
    return UserResponse(**created_user)

@app.post("/api/login",
         summary="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
         description="–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
         tags=["–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def login(user: UserLogin):
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_user = await users_collection.find_one({"login": user.login})
    if not db_user or not pwd_context.verify(user.password, db_user["password"]):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=30)
    access_token = create_access_token(
        data={"sub": str(db_user["_id"])},
        expires_delta=access_token_expires
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ is_admin)
    user_role = db_user.get("role", "student")
    if "is_admin" in db_user and db_user["is_admin"]:
        user_role = "admin"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ Redis
    user_id = str(db_user["_id"])
    session_data = {
        "id": user_id,
        "name": db_user["name"],
        "login": db_user["login"],
        "role": user_role,
        "quiz_points": db_user.get("quiz_points", 0),
        "last_activity": datetime.now().isoformat()
    }
    await cache.save_session(user_id, session_data)
    
    # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await cache.cache_user_profile(user_id, session_data)
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": {
            "id": user_id,
            "name": db_user["name"],
            "login": db_user["login"],
            "role": user_role,
            "is_admin": user_role == "admin"  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
    }

@app.get("/api/check-admin",
        summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        tags=["–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def check_admin(current_user: UserInDB = Depends(get_current_user)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = getattr(current_user, 'role', 'student')
    is_admin = user_role == UserRole.admin.value or getattr(current_user, 'is_admin', False)
    
    return {
        "is_admin": is_admin,
        "role": user_role
    }

@app.get("/api/profile",
        summary="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
        tags=["–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def get_profile(current_user: UserInDB = Depends(get_current_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = str(current_user.id) if hasattr(current_user, 'id') else str(current_user._id)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    cached_profile = await cache.get_user_profile(user_id)
    if cached_profile:
        print(f"üì¶ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
        return cached_profile
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    user_role = getattr(current_user, 'role', 'student')
    profile_data = {
        "id": user_id,
        "name": current_user.name,
        "login": current_user.login,
        "role": user_role,
        "quiz_points": getattr(current_user, 'quiz_points', 0),
        "created_at": getattr(current_user, 'created_at', None)
    }
    
    # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await cache.cache_user_profile(user_id, profile_data)
    print(f"üíæ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
    
    return profile_data

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 