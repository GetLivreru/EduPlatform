name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  
jobs:
  # 🔍 Code Quality Checks
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Python Dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit
        
    - name: 🎨 Format Check (Black)
      run: |
        cd backend
        black --check --diff .
        
    - name: 📋 Import Sort Check (isort)
      run: |
        cd backend
        isort --check-only --diff .
        
    - name: 🔍 Lint Check (flake8)
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔒 Security Check (Bandit)
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        
    - name: ⚛️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🔍 Frontend Lint
      run: |
        cd frontend
        npm run lint
        
    - name: 🎨 Frontend Format Check
      run: |
        cd frontend
        npm run format:check

  # 🧪 Backend Testing
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: 🧪 Run Tests
      env:
        MONGODB_URL: mongodb://localhost:27017/test_eduplatform
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # ⚛️ Frontend Testing
  test-frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ⚛️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🧪 Run Unit Tests
      run: |
        cd frontend
        npm run test:coverage
        
    - name: 🎭 Run E2E Tests
      run: |
        cd frontend
        npm run build
        npm run test:e2e:headless
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 🐳 Docker Build Test
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: eduplatform-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔨 Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: eduplatform-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: staging.eduplatform.com
        
    - name: 🚀 Deploy Backend to Railway
      uses: bervProject/railway-deploy@v1.1.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: backend
        detach: true

  # 🌐 Deploy to Production
  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 📦 Build and Push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/eduplatform-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/eduplatform-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📦 Build and Push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/eduplatform-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/eduplatform-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🚀 Deploy to Production (Vercel)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: app.eduplatform.com
        
    - name: 📧 Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 📊 Performance Testing
  performance:
    name: 📊 Performance Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ⚛️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 🚀 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true 