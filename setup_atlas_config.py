#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas
"""

import os
import re

def get_atlas_config():
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Atlas
    """
    print("üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º connection string –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Atlas –∫–ª–∞—Å—Ç–µ—Ä–∞:")
    print("(–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ Atlas ‚Üí Clusters ‚Üí Connect)")
    
    cluster_url = input("üîó Atlas Connection String (–Ω–∞–ø—Ä–∏–º–µ—Ä: mongodb+srv://user:pass@cluster.xxxxx.mongodb.net): ").strip()
    
    if not cluster_url:
        print("‚ùå Connection string –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–ø–æ–ª–Ω—è–µ–º connection string
    if "/LearnApp" not in cluster_url:
        if "?" in cluster_url:
            cluster_url = cluster_url.replace("?", "/LearnApp?")
        else:
            cluster_url = f"{cluster_url}/LearnApp"
    
    if "retryWrites=true" not in cluster_url:
        if "?" in cluster_url:
            cluster_url = f"{cluster_url}&retryWrites=true&w=majority"
        else:
            cluster_url = f"{cluster_url}?retryWrites=true&w=majority"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    secret_key = input("üîê SECRET_KEY (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ").strip()
    if not secret_key:
        import secrets
        secret_key = secrets.token_urlsafe(32)
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SECRET_KEY: {secret_key}")
    
    openai_key = input("ü§ñ OPENAI_API_KEY (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
    
    return {
        'MONGODB_URL': cluster_url,
        'SECRET_KEY': secret_key,
        'CORS_ORIGINS': 'http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000',
        'OPENAI_API_KEY': openai_key or 'your_openai_api_key_here'
    }

def create_env_file(config):
    """
    –°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    """
    env_content = f"""# MongoDB Atlas Configuration
MONGODB_URL={config['MONGODB_URL']}

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤
SECRET_KEY={config['SECRET_KEY']}

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
CORS_ORIGINS={config['CORS_ORIGINS']}

# OpenAI API –∫–ª—é—á
OPENAI_API_KEY={config['OPENAI_API_KEY']}
"""
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ .env —Ñ–∞–π–ª
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print(f"‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_connection(mongodb_url):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Atlas...")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ motor
        from motor.motor_asyncio import AsyncIOMotorClient
        import asyncio
        
        async def test():
            client = AsyncIOMotorClient(mongodb_url)
            try:
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await client.admin.command('ping')
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db = client.LearnApp
                collections = await db.list_collection_names()
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections)}")
                
                for col in collections:
                    count = await db[col].count_documents({})
                    print(f"   - {col}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
            finally:
                client.close()
        
        return asyncio.run(test())
        
    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å motor –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install motor")
        return None

def main():
    print("üöÄ –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB Atlas")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Atlas\n")
    
    # –®–∞–≥ 1: –°–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = get_atlas_config()
    if not config:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –í—ã—Ö–æ–¥.")
        return
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
    if create_env_file(config):
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    test_result = test_connection(config['MONGODB_URL'])
    
    # –®–∞–≥ 4: –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Atlas –≥–æ—Ç–æ–≤–∞")
    
    if test_result:
        print("2. ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: docker-compose -f docker-compose-atlas.yml up --build")
    elif test_result is None:
        print("2. ‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ motor: pip install motor")
        print("3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é")
        print("4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: docker-compose -f docker-compose-atlas.yml up --build")
    else:
        print("2. ‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ connection string –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Atlas")
        print("3. üîç –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à IP –¥–æ–±–∞–≤–ª–µ–Ω –≤ Network Access")
        print("4. üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 