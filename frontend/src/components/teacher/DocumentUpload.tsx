import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { uploadDocumentAndGenerateQuiz } from '../../services/api';
import { useAuth } from '../../context/AuthContext';
import { FaUpload, FaSpinner, FaCheckCircle, FaExclamationTriangle, FaRobot, FaBrain } from 'react-icons/fa';

const DocumentUpload: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<string>('');
  const [dragActive, setDragActive] = useState(false);
  
  // Form state
  const [file, setFile] = useState<File | null>(null);
  const [quizTitle, setQuizTitle] = useState('');
  const [difficulty, setDifficulty] = useState('Medium');
  const [questionsCount, setQuestionsCount] = useState(5);
  const [uploadResult, setUploadResult] = useState<any>(null);

  // Check if user is teacher
  if (!user || user.role !== 'teacher') {
    return (
      <div className="max-w-2xl mx-auto p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <div className="text-center text-red-600 dark:text-red-400">
          <FaExclamationTriangle className="mx-auto text-4xl mb-4" />
          <h2 className="text-xl font-bold mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p>–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–≤–∏–∑—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.</p>
        </div>
      </div>
    );
  }

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileSelect(e.dataTransfer.files[0]);
    }
  }, []);

  const handleFileSelect = (selectedFile: File) => {
    // Check file type
    const allowedTypes = [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain'
    ];
    
    if (!allowedTypes.includes(selectedFile.type)) {
      alert('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF, DOCX –∏ TXT');
      return;
    }

    // Check file size (max 10MB)
    if (selectedFile.size > 10 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      return;
    }

    setFile(selectedFile);
    if (!quizTitle) {
      // Auto-generate quiz title from filename
      const nameWithoutExt = selectedFile.name.split('.').slice(0, -1).join('.');
      setQuizTitle(`–¢–µ—Å—Ç –ø–æ "${nameWithoutExt}"`);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileSelect(e.target.files[0]);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!file || !quizTitle.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞');
      return;
    }

    setIsUploading(true);
    setUploadProgress('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    setUploadResult(null);

    try {
      // Simulate progress steps
      setTimeout(() => setUploadProgress('–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...'), 1000);
      setTimeout(() => setUploadProgress('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò...'), 2000);
      setTimeout(() => setUploadProgress('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞...'), 3000);

      const result = await uploadDocumentAndGenerateQuiz(
        file,
        quizTitle,
        difficulty,
        questionsCount
      );

      setUploadResult(result);
      setUploadProgress('–ì–æ—Ç–æ–≤–æ!');
      
      // Reset form
      setFile(null);
      setQuizTitle('');
      setDifficulty('Medium');
      setQuestionsCount(5);
      
    } catch (error: any) {
      console.error('Upload error:', error);
      alert(error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      setUploadProgress('');
    } finally {
      setIsUploading(false);
    }
  };

  const getFileIcon = (fileType: string) => {
    if (fileType.includes('pdf')) return 'üìÑ';
    if (fileType.includes('word')) return 'üìù';
    if (fileType.includes('text')) return 'üìã';
    return 'üìÑ';
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
        <div className="flex items-center mb-6">
          <FaRobot className="text-3xl text-blue-500 mr-3" />
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              –ò–ò –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¢–µ—Å—Ç–æ–≤
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
            </p>
          </div>
        </div>

        {/* Upload Result */}
        {uploadResult && (
          <div className="mb-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
            <div className="flex items-center text-green-800 dark:text-green-200 mb-2">
              <FaCheckCircle className="mr-2" />
              <h3 className="font-semibold">–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</h3>
            </div>
            <p className="text-green-700 dark:text-green-300 mb-3">
              {uploadResult.message}
            </p>
            <div className="flex space-x-3">
              <button
                onClick={() => navigate(`/quiz/${uploadResult.quiz_id}`)}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition-colors"
              >
                –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Å—Ç
              </button>
              <button
                onClick={() => navigate('/teacher/quizzes')}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition-colors"
              >
                –ú–æ–∏ —Ç–µ—Å—Ç—ã
              </button>
            </div>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* File Upload */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –î–æ–∫—É–º–µ–Ω—Ç
            </label>
            <div
              className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                dragActive
                  ? 'border-blue-400 bg-blue-50 dark:bg-blue-900/20'
                  : 'border-gray-300 dark:border-gray-600 hover:border-gray-400'
              }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              {file ? (
                <div className="flex items-center justify-center space-x-4">
                  <span className="text-4xl">{getFileIcon(file.type)}</span>
                  <div className="text-left">
                    <p className="font-medium text-gray-900 dark:text-white">{file.name}</p>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      {formatFileSize(file.size)}
                    </p>
                  </div>
                  <button
                    type="button"
                    onClick={() => setFile(null)}
                    className="text-red-500 hover:text-red-700"
                  >
                    ‚úï
                  </button>
                </div>
              ) : (
                <div>
                  <FaUpload className="mx-auto text-gray-400 text-4xl mb-4" />
                  <p className="text-gray-600 dark:text-gray-400 mb-2">
                    –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏
                  </p>
                  <label className="cursor-pointer bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors inline-block">
                    –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                    <input
                      type="file"
                      className="hidden"
                      accept=".pdf,.docx,.txt"
                      onChange={handleFileInputChange}
                    />
                  </label>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2">
                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, DOCX, TXT (–¥–æ 10MB)
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Quiz Settings */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
              </label>
              <input
                type="text"
                value={quizTitle}
                onChange={(e) => setQuizTitle(e.target.value)}
                className="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 
                         focus:outline-none focus:ring-2 focus:ring-blue-500 
                         dark:bg-gray-700 dark:text-white"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞..."
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –°–ª–æ–∂–Ω–æ—Å—Ç—å
              </label>
              <select
                value={difficulty}
                onChange={(e) => setDifficulty(e.target.value)}
                className="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 
                         focus:outline-none focus:ring-2 focus:ring-blue-500 
                         dark:bg-gray-700 dark:text-white"
              >
                <option value="Easy">–õ–µ–≥–∫–∏–π</option>
                <option value="Medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="Hard">–°–ª–æ–∂–Ω—ã–π</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
              </label>
              <input
                type="number"
                min="3"
                max="20"
                value={questionsCount}
                onChange={(e) => setQuestionsCount(parseInt(e.target.value))}
                className="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 
                         focus:outline-none focus:ring-2 focus:ring-blue-500 
                         dark:bg-gray-700 dark:text-white"
              />
            </div>
          </div>

          {/* AI Info */}
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <div className="flex items-center text-blue-800 dark:text-blue-200 mb-2">
              <FaBrain className="mr-2" />
              <h3 className="font-semibold">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä</h3>
            </div>
            <ul className="text-blue-700 dark:text-blue-300 text-sm space-y-1">
              <li>‚Ä¢ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞</li>
              <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π</li>
              <li>‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</li>
              <li>‚Ä¢ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å</li>
            </ul>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end">
            <button
              type="submit"
              disabled={!file || !quizTitle.trim() || isUploading}
              className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-3 
                       rounded-lg font-medium flex items-center transition-colors"
            >
              {isUploading ? (
                <>
                  <FaSpinner className="mr-2 animate-spin" />
                  –û–±—Ä–∞–±–æ—Ç–∫–∞...
                </>
              ) : (
                <>
                  <FaRobot className="mr-2" />
                  –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç —Å –ò–ò
                </>
              )}
            </button>
          </div>
        </form>

        {/* Progress */}
        {isUploading && uploadProgress && (
          <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <div className="flex items-center text-gray-700 dark:text-gray-300">
              <FaSpinner className="mr-2 animate-spin" />
              <span>{uploadProgress}</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DocumentUpload; 