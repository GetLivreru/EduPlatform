#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB –∏ Atlas
"""

import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient

async def get_users_from_db(client, db_name="LearnApp"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    db = client[db_name]
    users_collection = db.users  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'users'
    
    users = []
    async for user in users_collection.find({}):
        users.append(user)
    
    return users

async def sync_users():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB –∏ Atlas
    """
    print("üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB –∏ Atlas")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    local_uri = "mongodb://localhost:27017"
    
    print("üîó –í–≤–µ–¥–∏—Ç–µ Atlas Connection String:")
    atlas_uri = input("Atlas URI: ").strip()
    
    if not atlas_uri:
        print("‚ùå Atlas URI –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "/LearnApp" not in atlas_uri:
        if "?" in atlas_uri:
            atlas_uri = atlas_uri.replace("?", "/LearnApp?")
        else:
            atlas_uri = f"{atlas_uri}/LearnApp"
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB...")
        local_client = AsyncIOMotorClient(local_uri)
        await local_client.admin.command('ping')
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas
        print("üåç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas...")
        atlas_client = AsyncIOMotorClient(atlas_uri)
        await atlas_client.admin.command('ping')
        print("‚úÖ Atlas –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        print("\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        local_users = await get_users_from_db(local_client)
        print(f"–ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(local_users)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Atlas
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Atlas...")
        atlas_users = await get_users_from_db(atlas_client)
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Atlas: {len(atlas_users)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        local_users_dict = {user.get('email', user.get('username', str(user.get('_id')))): user for user in local_users}
        atlas_users_dict = {user.get('email', user.get('username', str(user.get('_id')))): user for user in atlas_users}
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        only_local = []
        for key, user in local_users_dict.items():
            if key not in atlas_users_dict:
                only_local.append(user)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ Atlas
        only_atlas = []
        for key, user in atlas_users_dict.items():
            if key not in local_users_dict:
                only_atlas.append(user)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ: {len(only_local)}")
        for user in only_local:
            print(f"   - {user.get('email', user.get('username', 'Unknown'))}")
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –≤ Atlas: {len(only_atlas)}")
        for user in only_atlas:
            print(f"   - {user.get('email', user.get('username', 'Unknown'))}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if only_local or only_atlas:
            print(f"\nüîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
            print("1. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Atlas")
            print("2. –î–æ–±–∞–≤–∏—Ç—å Atlas –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î")
            print("3. –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ—Ö)")
            print("4. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å")
            
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-4): ").strip()
            
            if choice == "1":
                await sync_local_to_atlas(local_client, atlas_client, only_local)
            elif choice == "2":
                await sync_atlas_to_local(local_client, atlas_client, only_atlas)
            elif choice == "3":
                await sync_local_to_atlas(local_client, atlas_client, only_local)
                await sync_atlas_to_local(local_client, atlas_client, only_atlas)
            else:
                print("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if 'local_client' in locals():
            local_client.close()
        if 'atlas_client' in locals():
            atlas_client.close()

async def sync_local_to_atlas(local_client, atlas_client, users_to_sync):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Atlas
    """
    if not users_to_sync:
        return
    
    print(f"\n‚û°Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(users_to_sync)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Atlas...")
    
    atlas_db = atlas_client.LearnApp
    atlas_users = atlas_db.users
    
    for user in users_to_sync:
        try:
            # –£–¥–∞–ª—è–µ–º _id —á—Ç–æ–±—ã MongoDB —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π
            user_copy = user.copy()
            if '_id' in user_copy:
                del user_copy['_id']
            
            result = await atlas_users.insert_one(user_copy)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {user.get('email', user.get('username', 'Unknown'))}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {user.get('email', 'Unknown')}: {e}")

async def sync_atlas_to_local(local_client, atlas_client, users_to_sync):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Atlas –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
    """
    if not users_to_sync:
        return
    
    print(f"\n‚¨ÖÔ∏è  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(users_to_sync)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î...")
    
    local_db = local_client.LearnApp
    local_users = local_db.users
    
    for user in users_to_sync:
        try:
            # –£–¥–∞–ª—è–µ–º _id —á—Ç–æ–±—ã MongoDB —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π
            user_copy = user.copy()
            if '_id' in user_copy:
                del user_copy['_id']
            
            result = await local_users.insert_one(user_copy)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {user.get('email', user.get('username', 'Unknown'))}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {user.get('email', 'Unknown')}: {e}")

async def show_all_users():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–µ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    print("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 30)
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞
    local_uri = "mongodb://localhost:27017"
    
    # Atlas
    print("üîó –í–≤–µ–¥–∏—Ç–µ Atlas Connection String:")
    atlas_uri = input("Atlas URI: ").strip()
    
    if not atlas_uri:
        print("‚ùå Atlas URI –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return
    
    if "/LearnApp" not in atlas_uri:
        if "?" in atlas_uri:
            atlas_uri = atlas_uri.replace("?", "/LearnApp?")
        else:
            atlas_uri = f"{atlas_uri}/LearnApp"
    
    try:
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        print("\nüè† –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        try:
            local_client = AsyncIOMotorClient(local_uri)
            await local_client.admin.command('ping')
            local_users = await get_users_from_db(local_client)
            
            for i, user in enumerate(local_users, 1):
                email = user.get('email', '–ù–µ—Ç email')
                username = user.get('username', '–ù–µ—Ç username')
                created_at = user.get('created_at', '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
                print(f"   {i}. {email} ({username}) - {created_at}")
            
            local_client.close()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
        
        # Atlas –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        print("\nüåç Atlas –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        try:
            atlas_client = AsyncIOMotorClient(atlas_uri)
            await atlas_client.admin.command('ping')
            atlas_users = await get_users_from_db(atlas_client)
            
            for i, user in enumerate(atlas_users, 1):
                email = user.get('email', '–ù–µ—Ç email')
                username = user.get('username', '–ù–µ—Ç username') 
                created_at = user.get('created_at', '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
                print(f"   {i}. {email} ({username}) - {created_at}")
            
            atlas_client.close()
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Atlas: {e}")
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π MongoDB")
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        asyncio.run(sync_users())
    elif choice == "2":
        asyncio.run(show_all_users())
    else:
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main() 